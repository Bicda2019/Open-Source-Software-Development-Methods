
1
00:00:02.327 --> 00:00:06.740
Günümüzün Internet tabanlı teknoloji altyapısı ile

2
00:00:06.740 --> 00:00:09.000
işler gerçekten çok hızlı ilerliyor.

3
00:00:09.000 --> 00:00:15.460
Ayrıca, olabildiğince hatasız veya güvenlik sorunsuz,

4
00:00:15.460 --> 00i:00:19.761
yazılım düzeltmelerinin, güncellemelerinin ve yeni yazılımların

5
00:00:19.761 --> 00:00:23.970
Hazırlanması ve olabildiğince çabuk hatasız yayınlanması önemlidir

6
00:00:26.585 --> 00:00:33.323
Sürekli Bütünleşme kavramının devreye girdiği yer burasıdır. Yazılımın aynı lokasyondaki

7
00:00:33.323 --> 00:00:35.899
Birbirleri ile sık ve direkt iletişime geçebilen

8
00:00:35.899 --> 00:00:40.618
Bir veya birkaç kişinin yazılım gelitirdiği zamanlar vardı

9
00:00:40.618 --> 00:00:45.074
Sorumlulukları koordine etmek ve işçiliği bölmek nispeten kolaydı.

10
00:00:47.206 --> 00:00:48.431
Yine de değişiklikleri takip eden,,

11
00:00:48.431 --> 00:00:53.569
aynı zamanda birden fazla katılımcının bir proje üzerinde aynı anda

12
00:00:53.569 --> 00:00:59.089
Çakışmadan uyumlu çalışmasına olanak tanıyan

13
00:00:59.089 --> 00:01:04.605
revizyon kontrol sistemleri  geliştirmek önemliydi

14
00:01:04.605 --> 00:01:08.010
Bunu yapmak için, bir projenin ana kopyasını saklayan

15
00:01:08.010 --> 00:01:10.354
merkezi bir depo oluşturulmuştur.

16
00:01:10.354 --> 00:01:14.884
Ardından bu kopyayı bilgisayarlarına çekebilir, değişiklik yapabilir

17
00:01:14.884 --> 00:01:16.144
sonra tekrar ana kopyaya bunları gönderebilirdi.

18
00:01:16.844 --> 00:01:21.086
Iki kişinin aynı anda aynı şeyi çalışması sorunu oldukça özeldi

19
00:01:21.086 --> 00:01:23.733
ve sonunda gittikçe daha önemli hale geldi.

20
00:01:23.733 --> 00:01:27.547
insanlar bunun için teknikler geliştirdiler.

21
00:01:28.047 --> 00:01:33.057
llk gerçekten büyük da+AR8BMQ-tık geliştirme projesi, Linux çekirdeği oldu

22
00:01:33.657 --> 00:01:36.087
Bu projeye katılanlar dünyanın dört bir yanındaydı

23
00:01:36.087 --> 00:01:38.608
ve bugünlerde projede binlerce insan vardır.

24
00:01:39.308 --> 00:01:44.915
Git revizyon kontrol sistemi, bu tür dağıtılmış geliştirmeyi

25
00:01:44.915 --> 00:01:48.120
rasyonelleştirmek için Linus Torvalds tarafından icat edildi.

26
00:01:50.290 --> 00:01:55.430
Fakat bir revizyon kontrol sistem işlerin gerçekten 

27
00:01:55.430 --> 00:01:57.260
sorunsuz çalışabilmesini garanti edemiyor.

28
00:01:57.260 --> 00:02:00.876
Bir projenin farklı bölümlerinde farklı lokasyonlarda farklı görüşlerde çalışan insanlar varsa

29
00:02:00.876 --> 00:02:04.519
bir ağ kurmalı ve çatışma olmamalıdır

30
00:02:04.519 --> 00:02:09.519
Ve bir problemi çözmek başka bir alanda başka bir problem yaratmamalıdır, vb

31
00:02:09.519 --> 00:02:12.364
Bunu yapabilmek için test yaptırmanız gerekir

32
00:02:13.364 --> 00:02:18.532
Bu yüzden test yapıyorsanız, aynı anda birbiriyle çakışan değişiklikleri uygulayabilir misiniz?

33
00:02:18.532 --> 00:02:24.808
gibi birkaç soruyu göz önünde bulundurmanız gerekir.

34
00:02:24.808 --> 00:02:28.540
Çatışıyorlar(conflict) mı? Eğer öyleyse, bu çatışmaları nasıl çözersiniz?

35
00:02:29.040 --> 00:02:31.260
Proje bu durumda hala derleniyor mu?

36
00:02:31.260 --> 00:02:35.300
Tüm değişiklikleri uyguladıktan sonra üretilebilir mi?

37
00:02:35.800 --> 00:02:40.040
Peki ya olası hedefler? Bir projede çalışan birçok insan 

38
00:02:40.040 --> 00:02:43.160
yalnızca bir tür mimaride veya bir tür cihazda çal+ATEBXwEx-r

39
00:02:44.920 --> 00:02:48.230
Çalışmanın ne demek olduğunu tanımlamak zorundasınız.

40
00:02:49.030 --> 00:02:52.210
+ATABXw-lerin gerçekten çalıştığından emin olmak ve işlerin iyi olduğuna dair
41
00:02:52.210 --> 00:02:56.020
iraz güven vermek için temsili bir iş yüküyle

42
00:02:56.020 --> 00:02:58.549
kullanılabilecek iyi test paketleri var mı?

43
00:02:59.680 --> 00:03:04.866
Sürekli Entegrasyon tekniklerinin yaptığı şey, sürekli ve sık sık test etmenizi sağlamak 

44
00:03:04.866 --> 00:03:09.907
oluşan sorunları hızla çözerek

45
00:03:09.907 --> 00:03:13.044
geliştiriciler ve kullanıcıların hemfikir olması sağlar.

46
00:03:15.422 --> 00:03:20.892
Genellikle Sürekli Entegrasyon 3 ayrı aşamaya ayrılır.
47
00:03:21.192 --> 00:03:26.276
Sürekli Entegrasyon, Sürekli Teslimat(Delivery) ve Sürekli Dağıtım(Deployment) 

48
00:03:26.576 --> 00:03:31.221
Yazılımın ana dalındaki değişiklikleri sürekli olarak birleştirme 

49
00:03:31.221 --> 00:03:36.838
mümkün olduğunca çok sayıda platform, yazılım veya donanım varyasyonuyla 

50
00:03:36.838 --> 00:03:42.171
Yazılımın otomatik derlenmesi ve inşası Sürekli Entegrasyon ile sağlanır,

51
00:03:42.171 --> 00:03:46.823
Böylece herhangi bir çatışma daha kötüleşecek kadar  büyümeden önlenir.

52
00:03:47.823 --> 00:03:52.823
Sürekli Teslimat aşaması +ADs- tümleşik değişiklik yaptığınızda, hızlı ve otomatik,

53
00:03:52.823 --> 00:03:58.023
bir teslimat(delivery) veya yayın(release) işleminin gerçekleşmesi demektir. 
54
00:03:58.023 --> 00:04:03.033
yazılımın tüketicileri için de aynı şekilde piyasaya sürülmesidir.

55
00:04:03.033 --> 00:04:05.076
Bu tüketicilere bu yazılımı son kullanıcıya da+AR8BMQ-tan.

56
00:04:05.076 --> 00:04:09.273
şirketleri örnek verebiliriz.

57
00:04:09.673 --> 00:04:13.099
Ve bu üçüncü aşamada, Sürekli Dağıtım(Deployment) da yapılır.
58
00:04:13.099 --> 00:04:16.379
Yani bu asıl ürünü müşterilere bıraktığınız süreçtir.

59
00:04:17.660 --> 00:04:22.921
Bazen Sürekli Entegrasyon üç fazın da bir araya gelmesi anlamına gelir
60
00:04:22.921 --> 00:04:25.498
Teslimat ve  Dağıtımı da içerir

61
00:04:27.291 --> 00:04:31.861
İşte size her şeyin sürekli bir çemberde nasıl yürüdüğnü gösteren küçük bir grafik

62
00:04:31.861 --> 00:04:37.159
Basamaklar arasındaki zaman boşluğu mümkün olduğu kadar sıfıra yakın olmalıdır.

63
00:04:37.830 --> 00:04:43.473
Bazı durumlarda, geliştirici değişiklikleri aynı gün içinde kullanıcılara ulaşabilir,

64
00:04:43.473 --> 00:04:48.292
Hatta her şey çok temiz çalıştığında dakikalar ya da saatler içinde..

65
00:04:50.303 --> 00:04:54.986
Şimdi, nispeten açık faydalarından bahsettik

66
00:04:54.986 --> 00:04:58.910
Ancak Sürekli Entegrasyon için önemli maliyetler de vardır.

67
00:05:00.250 --> 00:05:03.266
Eğer geliştiricilerin değişikliklerini sürekli olarak entegre etmesi gerekiyorsa,

68
00:05:03.266 --> 00:05:08.741
Bu geliştiricilere olası bir baskıdır, +AMcA/A-nkü işlerini tamamen bitirmeden 

69
00:05:08.741 --> 00:05:14.615
işlerini sürekli olarak diğer insanlara vermek zorundadırlar.

70
00:05:14.915 --> 00:05:19.046
Tabii ki, yarar, yanlış bir yolda çok fazla gitmenin önlenmesidir.
71
00:05:19.046 --> 00:05:22.528
Kötüleşmeden önce ve diğer insanların yolunu tıkamadan önce 
72
00:05:22.528 --> 00:05:24.210
Hatalar yakalanır.
73
00:05:24.830 --> 00:05:29.978
Diğer bir maliyet ise Sürekli Entegrasyon sunucusu olarak adlandırılan şeyi inşa etmenizdir.

74
00:05:29.972 --> 00:05:32.921
Bütün bu Sürekli Entegrasyon sürecini idare etmek,

75
00:05:32.921 --> 00:05:36.740
Ve uygulamak için görevlendirilmiş personel bulunmalıdır.

76
00:05:37.700 --> 00:05:42.660
Buradaki avantaj, her şeyin tamamen otomatik olmasıdır

77
00:05:42.660 --> 00:05:44.510
Tüm işler önceden ve otomatik yapıldı için  .

78
00:05:44.510 --> 00:05:48.250
her seferinde sadece bir yazılım kurmak(build) zorunda değilsiniz 

79
00:05:48.850 --> 00:05:53.823	
Diğer bir maliyet ise testleri yapaca+AR8BMQ-nız, yazılımı kuraca+AR8BMQ-nız 
80

00:05:53.823 --> 00:05:57.441
+IBw-script+IB0-lerin ve diğer araçların yazılması gerektiğidir.

81
00:05:57.441 --> 00:06:01.970
Ve karma+AV8BMQ-k bir projeye böyle bir altyapı kurmak için çok fazla iş vardır.

82
00:06:01.970 --> 00:06:06.010
Ancak bunun yararı, eskiden çalışt+ATEBHwEx-nız özelliklerde bulunan

83
00:06:06.010 --> 00:06:11.130
hataları veya gerileme olarak bilinenleri azaltmanızdır.

84
00:06:11.130 --> 00:06:14.920
Bu süreci kısaltırsınız ve sürümleriniz daha hatasız olur.

85
00:06:16.140 --> 00:06:20.351
Sürekli Entegrasyon için kullanılan birçok araç vardır

86
00:06:20.351 --> 00:06:24.003
Bunlar tüm sürece yardımcı olan yazılım paketleridir.

87
00:06:24.003 --> 00:06:28.578
Jenkins en çok kullanılandır, burada diğer bazı paketlerin bir listesini verebiliriz:

88
00:06:28.578 --> 00:06:34.056
Travis, TeamCity, GitLab CI, Bamboo, vb.

89
00:06:34.056 --> 00:06:39.660
Bunlardan bazıları da ücretsizdir.
